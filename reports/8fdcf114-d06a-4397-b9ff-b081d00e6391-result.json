{"name": "test_appointment_workflow[test_case7]", "status": "broken", "statusDetails": {"message": "selenium.common.exceptions.TimeoutException: Message: \nStacktrace:\n\tGetHandleVerifier [0x0x7ff6b3593d85+79397]\n\tGetHandleVerifier [0x0x7ff6b3593de0+79488]\n\t(No symbol) [0x0x7ff6b333c0fa]\n\t(No symbol) [0x0x7ff6b3392fd6]\n\t(No symbol) [0x0x7ff6b339328c]\n\t(No symbol) [0x0x7ff6b33e6537]\n\t(No symbol) [0x0x7ff6b33bb1df]\n\t(No symbol) [0x0x7ff6b33e3344]\n\t(No symbol) [0x0x7ff6b33baf73]\n\t(No symbol) [0x0x7ff6b33841b1]\n\t(No symbol) [0x0x7ff6b3384f43]\n\tGetHandleVerifier [0x0x7ff6b385e1ed+3005069]\n\tGetHandleVerifier [0x0x7ff6b385831d+2980797]\n\tGetHandleVerifier [0x0x7ff6b3877e0d+3110573]\n\tGetHandleVerifier [0x0x7ff6b35ad6de+184190]\n\tGetHandleVerifier [0x0x7ff6b35b516f+215567]\n\tGetHandleVerifier [0x0x7ff6b359c974+115220]\n\tGetHandleVerifier [0x0x7ff6b359cb29+115657]\n\tGetHandleVerifier [0x0x7ff6b3583268+11016]\n\tBaseThreadInitThunk [0x0x7ffa2797e8d7+23]\n\tRtlUserThreadStart [0x0x7ffa2805c34c+44]", "trace": "driver = <selenium.webdriver.chrome.webdriver.WebDriver (session=\"92a2013410c2349e780aaa631f0cec32\")>\ntest_case = {'diagnosis': 'Viêm kết mạc dị ứng', 'doctor_advice': 'Đeo kính bảo vệ, tái khám sau 3 ngày', 'expected_exam_status': 'Khám xong', 'expected_payment_status': 'Đã thanh toán', ...}\n\n    @pytest.mark.parametrize(\"test_case\", test_data)\n    def test_appointment_workflow(driver, test_case):\n        \"\"\"Test the complete appointment, examination, and payment workflow.\"\"\"\n        test_id = test_case[\"test_id\"]\n        patient_index = test_case[\"patient_index\"]\n        symptom = test_case[\"symptom\"]\n        diagnosis = test_case[\"diagnosis\"]\n        treatment = test_case[\"treatment\"]\n        doctor_advice = test_case[\"doctor_advice\"]\n        water_morning = test_case[\"water_morning\"]\n        water_afternoon = test_case[\"water_afternoon\"]\n        water_evening = test_case[\"water_evening\"]\n        water_night = test_case[\"water_night\"]\n        water_duration = test_case[\"water_duration\"]\n        water_quantity = test_case[\"water_quantity\"]\n        water_note = test_case[\"water_note\"]\n        spray_morning = test_case[\"spray_morning\"]\n        spray_afternoon = test_case[\"spray_afternoon\"]\n        spray_evening = test_case[\"spray_evening\"]\n        spray_night = test_case[\"spray_night\"]\n        spray_duration = test_case[\"spray_duration\"]\n        spray_quantity = test_case[\"spray_quantity\"]\n        spray_note = test_case[\"spray_note\"]\n        expected_exam_status = test_case[\"expected_exam_status\"]\n        expected_payment_status = test_case[\"expected_payment_status\"]\n        extra_data = {k: v for k, v in test_case.items() if k not in [\n            \"test_id\", \"patient_index\", \"symptom\", \"diagnosis\", \"treatment\", \"doctor_advice\",\n            \"water_morning\", \"water_afternoon\", \"water_evening\", \"water_night\", \"water_duration\", \"water_quantity\", \"water_note\",\n            \"spray_morning\", \"spray_afternoon\", \"spray_evening\", \"spray_night\", \"spray_duration\", \"spray_quantity\", \"spray_note\",\n            \"expected_exam_status\", \"expected_payment_status\"\n        ]}\n    \n        wait = WebDriverWait(driver, 50)\n        login_page = LoginPage(driver)\n        patient_page = PatientPage(driver)\n        exam_page = ExaminationPage(driver)\n        payment_page = PaymentPage(driver)\n    \n        # Login\n        login_page.login()\n        wait.until(lambda d: d.current_url.startswith(\"https://clinic-local.amaz.com.vn/\"))\n    \n        # Patient actions\n>       patient_page.go_to_patient_tab()\n\ntests\\test_examination_process.py:59: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\npages\\patient_page.py:44: in go_to_patient_tab\n    self.wait.until(EC.element_to_be_clickable(self.patient_tab_button)).click()\n    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.support.wait.WebDriverWait (session=\"92a2013410c2349e780aaa631f0cec32\")>, method = <function element_to_be_clickable.<locals>._predicate at 0x00000204B1BF5120>\nmessage = ''\n\n    def until(self, method: Callable[[D], Union[Literal[False], T]], message: str = \"\") -> T:\n        \"\"\"Wait until the method returns a value that is not False.\n    \n        Calls the method provided with the driver as an argument until the\n        return value does not evaluate to ``False``.\n    \n        Parameters:\n        -----------\n        method: callable(WebDriver)\n            - A callable object that takes a WebDriver instance as an argument.\n    \n        message: str\n            - Optional message for :exc:`TimeoutException`\n    \n        Return:\n        -------\n        object: T\n            - The result of the last call to `method`\n    \n        Raises:\n        -------\n        TimeoutException\n            - If 'method' does not return a truthy value within the WebDriverWait\n            object's timeout\n    \n        Example:\n        --------\n        >>> from selenium.webdriver.common.by import By\n        >>> from selenium.webdriver.support.ui import WebDriverWait\n        >>> from selenium.webdriver.support import expected_conditions as EC\n    \n        # Wait until an element is visible on the page\n        >>> wait = WebDriverWait(driver, 10)\n        >>> element = wait.until(EC.visibility_of_element_located((By.ID, \"exampleId\")))\n        >>> print(element.text)\n        \"\"\"\n        screen = None\n        stacktrace = None\n    \n        end_time = time.monotonic() + self._timeout\n        while True:\n            try:\n                value = method(self._driver)\n                if value:\n                    return value\n            except self._ignored_exceptions as exc:\n                screen = getattr(exc, \"screen\", None)\n                stacktrace = getattr(exc, \"stacktrace\", None)\n            if time.monotonic() > end_time:\n                break\n            time.sleep(self._poll)\n>       raise TimeoutException(message, screen, stacktrace)\nE       selenium.common.exceptions.TimeoutException: Message: \nE       Stacktrace:\nE       \tGetHandleVerifier [0x0x7ff6b3593d85+79397]\nE       \tGetHandleVerifier [0x0x7ff6b3593de0+79488]\nE       \t(No symbol) [0x0x7ff6b333c0fa]\nE       \t(No symbol) [0x0x7ff6b3392fd6]\nE       \t(No symbol) [0x0x7ff6b339328c]\nE       \t(No symbol) [0x0x7ff6b33e6537]\nE       \t(No symbol) [0x0x7ff6b33bb1df]\nE       \t(No symbol) [0x0x7ff6b33e3344]\nE       \t(No symbol) [0x0x7ff6b33baf73]\nE       \t(No symbol) [0x0x7ff6b33841b1]\nE       \t(No symbol) [0x0x7ff6b3384f43]\nE       \tGetHandleVerifier [0x0x7ff6b385e1ed+3005069]\nE       \tGetHandleVerifier [0x0x7ff6b385831d+2980797]\nE       \tGetHandleVerifier [0x0x7ff6b3877e0d+3110573]\nE       \tGetHandleVerifier [0x0x7ff6b35ad6de+184190]\nE       \tGetHandleVerifier [0x0x7ff6b35b516f+215567]\nE       \tGetHandleVerifier [0x0x7ff6b359c974+115220]\nE       \tGetHandleVerifier [0x0x7ff6b359cb29+115657]\nE       \tGetHandleVerifier [0x0x7ff6b3583268+11016]\nE       \tBaseThreadInitThunk [0x0x7ffa2797e8d7+23]\nE       \tRtlUserThreadStart [0x0x7ffa2805c34c+44]\n\nvenv\\Lib\\site-packages\\selenium\\webdriver\\support\\wait.py:138: TimeoutException"}, "description": "Test the complete appointment, examination, and payment workflow.", "attachments": [{"name": "log", "source": "e876c8f6-d5c0-47d7-8660-5d9644c70deb-attachment.txt", "type": "text/plain"}], "parameters": [{"name": "test_case", "value": "{'test_id': 8, 'patient_index': 8, 'symptom': 'Ngứa mắt, chảy nước mắt', 'diagnosis': 'Viêm kết mạc dị ứng', 'treatment': 'Dùng thuốc nhỏ mắt, tránh tiếp xúc dị nguyên', 'doctor_advice': 'Đeo kính bảo vệ, tái khám sau 3 ngày', 'water_morning': 1, 'water_afternoon': 0, 'water_evening': 1, 'water_night': 0, 'water_duration': 5, 'water_quantity': 10, 'water_note': 'Uống để hỗ trợ miễn dịch', 'spray_morning': 2, 'spray_afternoon': 2, 'spray_evening': 2, 'spray_night': 2, 'spray_duration': 5, 'spray_quantity': 2, 'spray_note': 'Nhỏ mắt khi ngứa', 'expected_exam_status': 'Khám xong', 'expected_payment_status': 'Đã thanh toán', 'vital_signs': {'temperature': '36.7', 'height': '165', 'weight': '55', 'systolic': '115', 'diastolic': '75', 'heartbeat': '72', 'spo2': '97', 'blood_sugar': '86'}, 'medical_history': {'admission_reason': 'Ngứa mắt và chảy nước mắt 2 ngày', 'allergy': 'Dị ứng bụi', 'personal_history': 'Tiền sử viêm kết mạc dị ứng', 'family_history': 'Có tiền sử dị ứng', 'medical_history': 'Đã điều trị viêm kết mạc trước đây'}, 'physical_exam': {'neurology': 'Bình thường', 'dermatology': 'Bình thường'}, 'regional_exam': {'other_organs': 'Kết mạc mắt đỏ'}, 'paraclinical': {'result': 'Không cần xét nghiệm'}}"}], "start": 1756263851683, "stop": 1756263862888, "uuid": "ba67eeb5-5092-4493-9812-655da7281291", "historyId": "101d21a4e63266c2ec30e9c409f19be2", "testCaseId": "fd63d85305573f519d70d7f9e86fd1a8", "fullName": "tests.test_examination_process#test_appointment_workflow", "labels": [{"name": "parentSuite", "value": "tests"}, {"name": "suite", "value": "test_examination_process"}, {"name": "host", "value": "HuyNK"}, {"name": "thread", "value": "15304-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "tests.test_examination_process"}], "titlePath": ["tests", "test_examination_process.py"]}