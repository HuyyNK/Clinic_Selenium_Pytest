{"name": "test_add_edit_delete_service_group[test_id_9]", "status": "broken", "statusDetails": {"message": "selenium.common.exceptions.ElementClickInterceptedException: Message: element click intercepted: Element <span>...</span> is not clickable at point (1419, 121). Other element would receive the click: <div tabindex=\"-1\" class=\"ant-modal-wrap\">...</div>\n  (Session info: chrome=139.0.7258.139); For documentation on this error, please visit: https://www.selenium.dev/documentation/webdriver/troubleshooting/errors#elementclickinterceptedexception\nStacktrace:\n\tGetHandleVerifier [0x0x7ff6b3593d85+79397]\n\tGetHandleVerifier [0x0x7ff6b3593de0+79488]\n\t(No symbol) [0x0x7ff6b333c0fa]\n\t(No symbol) [0x0x7ff6b339afd9]\n\t(No symbol) [0x0x7ff6b3398972]\n\t(No symbol) [0x0x7ff6b33959c1]\n\t(No symbol) [0x0x7ff6b33948b1]\n\t(No symbol) [0x0x7ff6b33860e8]\n\t(No symbol) [0x0x7ff6b33bb19a]\n\t(No symbol) [0x0x7ff6b3385996]\n\t(No symbol) [0x0x7ff6b33bb3b0]\n\t(No symbol) [0x0x7ff6b33e3344]\n\t(No symbol) [0x0x7ff6b33baf73]\n\t(No symbol) [0x0x7ff6b33841b1]\n\t(No symbol) [0x0x7ff6b3384f43]\n\tGetHandleVerifier [0x0x7ff6b385e1ed+3005069]\n\tGetHandleVerifier [0x0x7ff6b385831d+2980797]\n\tGetHandleVerifier [0x0x7ff6b3877e0d+3110573]\n\tGetHandleVerifier [0x0x7ff6b35ad6de+184190]\n\tGetHandleVerifier [0x0x7ff6b35b516f+215567]\n\tGetHandleVerifier [0x0x7ff6b359c974+115220]\n\tGetHandleVerifier [0x0x7ff6b359cb29+115657]\n\tGetHandleVerifier [0x0x7ff6b3583268+11016]\n\tBaseThreadInitThunk [0x0x7ffa2797e8d7+23]\n\tRtlUserThreadStart [0x0x7ffa2805c34c+44]", "trace": "driver = <selenium.webdriver.chrome.webdriver.WebDriver (session=\"ee94de3a59983674720cf5cb8cee24b9\")>\ntest_case = {'description': 'Nhóm dịch vụ dành cho khoa Nhi', 'group_name': 'Nhóm Nhi Khoa Test 9', 'new_description': 'Nhóm dịch vụ chỉnh sửa cho khoa Nhi', 'new_group_name': 'Nhóm Nhi Khoa Test 9 (Edited)', ...}\n\n    @pytest.mark.parametrize(\"test_case\", test_data, ids=lambda x: f\"test_id_{x['test_id']}\")\n    def test_add_edit_delete_service_group(driver, test_case):\n        \"\"\"Test the full lifecycle of adding, editing, and deleting a service group.\"\"\"\n        test_id = test_case[\"test_id\"]\n        group_name = test_case[\"group_name\"]\n        description = test_case[\"description\"]\n        new_group_name = test_case[\"new_group_name\"]\n        new_description = test_case[\"new_description\"]\n    \n        wait = WebDriverWait(driver, 30)\n        login_page = LoginPage(driver)\n        service_group = ServiceGroupPage(driver)\n    \n        # Login\n        login_page.login()\n        wait.until(lambda d: d.current_url.startswith(\"https://clinic-local.amaz.com.vn/\"))\n    \n        # Navigate to service group page\n        service_group.navigate()\n    \n        # Add group\n>       service_group.add_group(group_name, description)\n\ntests\\test_service_group.py:35: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\nutils\\retry.py:15: in wrapper\n    return func(*args, **kwargs)\n           ^^^^^^^^^^^^^^^^^^^^^\npages\\service_group_page.py:88: in add_group\n    self.wait.until(EC.element_to_be_clickable(self.LOCATORS[\"add_button\"])).click()\nvenv\\Lib\\site-packages\\selenium\\webdriver\\remote\\webelement.py:120: in click\n    self._execute(Command.CLICK_ELEMENT)\nvenv\\Lib\\site-packages\\selenium\\webdriver\\remote\\webelement.py:573: in _execute\n    return self._parent.execute(command, params)\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\nvenv\\Lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:458: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x0000021528234250>\nresponse = {'status': 400, 'value': '{\"value\":{\"error\":\"element click intercepted\",\"message\":\"element click intercepted: Element ...ff6b3583268+11016]\\\\n\\\\tBaseThreadInitThunk [0x0x7ffa2797e8d7+23]\\\\n\\\\tRtlUserThreadStart [0x0x7ffa2805c34c+44]\\\\n\"}}'}\n\n    def check_response(self, response: dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                try:\n                    value = json.loads(value_json)\n                    if isinstance(value, dict):\n                        if len(value) == 1:\n                            value = value[\"value\"]\n                        status = value.get(\"error\", None)\n                        if not status:\n                            status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                            message = value.get(\"value\") or value.get(\"message\")\n                            if not isinstance(message, str):\n                                value = message\n                                message = message.get(\"message\")\n                        else:\n                            message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: type[WebDriverException]\n        e = ErrorCode()\n        error_codes = [item for item in dir(e) if not item.startswith(\"__\")]\n        for error_code in error_codes:\n            error_info = getattr(ErrorCode, error_code)\n            if isinstance(error_info, list) and status in error_info:\n                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)\n                break\n        else:\n            exception_class = WebDriverException\n    \n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.ElementClickInterceptedException: Message: element click intercepted: Element <span>...</span> is not clickable at point (1419, 121). Other element would receive the click: <div tabindex=\"-1\" class=\"ant-modal-wrap\">...</div>\nE         (Session info: chrome=139.0.7258.139); For documentation on this error, please visit: https://www.selenium.dev/documentation/webdriver/troubleshooting/errors#elementclickinterceptedexception\nE       Stacktrace:\nE       \tGetHandleVerifier [0x0x7ff6b3593d85+79397]\nE       \tGetHandleVerifier [0x0x7ff6b3593de0+79488]\nE       \t(No symbol) [0x0x7ff6b333c0fa]\nE       \t(No symbol) [0x0x7ff6b339afd9]\nE       \t(No symbol) [0x0x7ff6b3398972]\nE       \t(No symbol) [0x0x7ff6b33959c1]\nE       \t(No symbol) [0x0x7ff6b33948b1]\nE       \t(No symbol) [0x0x7ff6b33860e8]\nE       \t(No symbol) [0x0x7ff6b33bb19a]\nE       \t(No symbol) [0x0x7ff6b3385996]\nE       \t(No symbol) [0x0x7ff6b33bb3b0]\nE       \t(No symbol) [0x0x7ff6b33e3344]\nE       \t(No symbol) [0x0x7ff6b33baf73]\nE       \t(No symbol) [0x0x7ff6b33841b1]\nE       \t(No symbol) [0x0x7ff6b3384f43]\nE       \tGetHandleVerifier [0x0x7ff6b385e1ed+3005069]\nE       \tGetHandleVerifier [0x0x7ff6b385831d+2980797]\nE       \tGetHandleVerifier [0x0x7ff6b3877e0d+3110573]\nE       \tGetHandleVerifier [0x0x7ff6b35ad6de+184190]\nE       \tGetHandleVerifier [0x0x7ff6b35b516f+215567]\nE       \tGetHandleVerifier [0x0x7ff6b359c974+115220]\nE       \tGetHandleVerifier [0x0x7ff6b359cb29+115657]\nE       \tGetHandleVerifier [0x0x7ff6b3583268+11016]\nE       \tBaseThreadInitThunk [0x0x7ffa2797e8d7+23]\nE       \tRtlUserThreadStart [0x0x7ffa2805c34c+44]\n\nvenv\\Lib\\site-packages\\selenium\\webdriver\\remote\\errorhandler.py:232: ElementClickInterceptedException"}, "description": "Test the full lifecycle of adding, editing, and deleting a service group.", "attachments": [{"name": "log", "source": "90b16dad-161f-4ffd-b5e4-bb7d2822f477-attachment.txt", "type": "text/plain"}], "parameters": [{"name": "test_case", "value": "{'test_id': 9, 'group_name': 'Nhóm Nhi Khoa Test 9', 'description': 'Nhóm dịch vụ dành cho khoa Nhi', 'new_group_name': 'Nhóm Nhi Khoa Test 9 (Edited)', 'new_description': 'Nhóm dịch vụ chỉnh sửa cho khoa Nhi'}"}], "start": 1756264509980, "stop": 1756264549848, "uuid": "c3fcc08f-be43-491b-8db8-3739a3b2ba01", "historyId": "f3fb2ad18d455b2dd4483504b5215e21", "testCaseId": "3de2877fadcb8493d73a2384a9bcae08", "fullName": "tests.test_service_group#test_add_edit_delete_service_group", "labels": [{"name": "parentSuite", "value": "tests"}, {"name": "suite", "value": "test_service_group"}, {"name": "host", "value": "HuyNK"}, {"name": "thread", "value": "18524-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "tests.test_service_group"}], "titlePath": ["tests", "test_service_group.py"]}