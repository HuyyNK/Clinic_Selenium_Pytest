{"name": "test_appointment_workflow[test_case2]", "status": "broken", "statusDetails": {"message": "selenium.common.exceptions.ElementClickInterceptedException: Message: element click intercepted: Element <div class=\"sc-eItTMj gTopxD\">...</div> is not clickable at point (975, 10). Other element would receive the click: <div class=\"sc-cHPgQl EomtA header-notification\">...</div>\n  (Session info: chrome=139.0.7258.139); For documentation on this error, please visit: https://www.selenium.dev/documentation/webdriver/troubleshooting/errors#elementclickinterceptedexception\nStacktrace:\n\tGetHandleVerifier [0x0x7ff6b3593d85+79397]\n\tGetHandleVerifier [0x0x7ff6b3593de0+79488]\n\t(No symbol) [0x0x7ff6b333c0fa]\n\t(No symbol) [0x0x7ff6b339afd9]\n\t(No symbol) [0x0x7ff6b3398972]\n\t(No symbol) [0x0x7ff6b33959c1]\n\t(No symbol) [0x0x7ff6b33948b1]\n\t(No symbol) [0x0x7ff6b33860e8]\n\t(No symbol) [0x0x7ff6b33bb19a]\n\t(No symbol) [0x0x7ff6b3385996]\n\t(No symbol) [0x0x7ff6b33bb3b0]\n\t(No symbol) [0x0x7ff6b33e3344]\n\t(No symbol) [0x0x7ff6b33baf73]\n\t(No symbol) [0x0x7ff6b33841b1]\n\t(No symbol) [0x0x7ff6b3384f43]\n\tGetHandleVerifier [0x0x7ff6b385e1ed+3005069]\n\tGetHandleVerifier [0x0x7ff6b385831d+2980797]\n\tGetHandleVerifier [0x0x7ff6b3877e0d+3110573]\n\tGetHandleVerifier [0x0x7ff6b35ad6de+184190]\n\tGetHandleVerifier [0x0x7ff6b35b516f+215567]\n\tGetHandleVerifier [0x0x7ff6b359c974+115220]\n\tGetHandleVerifier [0x0x7ff6b359cb29+115657]\n\tGetHandleVerifier [0x0x7ff6b3583268+11016]\n\tBaseThreadInitThunk [0x0x7ffa2797e8d7+23]\n\tRtlUserThreadStart [0x0x7ffa2805c34c+44]", "trace": "driver = <selenium.webdriver.chrome.webdriver.WebDriver (session=\"f1040237346cc9426c7ef94c6d96438a\")>\ntest_case = {'diagnosis': 'Thiếu máu nhẹ', 'doctor_advice': 'Tái khám sau 7 ngày, theo dõi chóng mặt', 'expected_exam_status': 'Khám xong', 'expected_payment_status': 'Đã thanh toán', ...}\n\n    @pytest.mark.parametrize(\"test_case\", test_data)\n    def test_appointment_workflow(driver, test_case):\n        \"\"\"Test the complete appointment, examination, and payment workflow.\"\"\"\n        test_id = test_case[\"test_id\"]\n        patient_index = test_case[\"patient_index\"]\n        symptom = test_case[\"symptom\"]\n        diagnosis = test_case[\"diagnosis\"]\n        treatment = test_case[\"treatment\"]\n        doctor_advice = test_case[\"doctor_advice\"]\n        water_morning = test_case[\"water_morning\"]\n        water_afternoon = test_case[\"water_afternoon\"]\n        water_evening = test_case[\"water_evening\"]\n        water_night = test_case[\"water_night\"]\n        water_duration = test_case[\"water_duration\"]\n        water_quantity = test_case[\"water_quantity\"]\n        water_note = test_case[\"water_note\"]\n        spray_morning = test_case[\"spray_morning\"]\n        spray_afternoon = test_case[\"spray_afternoon\"]\n        spray_evening = test_case[\"spray_evening\"]\n        spray_night = test_case[\"spray_night\"]\n        spray_duration = test_case[\"spray_duration\"]\n        spray_quantity = test_case[\"spray_quantity\"]\n        spray_note = test_case[\"spray_note\"]\n        expected_exam_status = test_case[\"expected_exam_status\"]\n        expected_payment_status = test_case[\"expected_payment_status\"]\n        extra_data = {k: v for k, v in test_case.items() if k not in [\n            \"test_id\", \"patient_index\", \"symptom\", \"diagnosis\", \"treatment\", \"doctor_advice\",\n            \"water_morning\", \"water_afternoon\", \"water_evening\", \"water_night\", \"water_duration\", \"water_quantity\", \"water_note\",\n            \"spray_morning\", \"spray_afternoon\", \"spray_evening\", \"spray_night\", \"spray_duration\", \"spray_quantity\", \"spray_note\",\n            \"expected_exam_status\", \"expected_payment_status\"\n        ]}\n    \n        wait = WebDriverWait(driver, 50)\n        login_page = LoginPage(driver)\n        patient_page = PatientPage(driver)\n        exam_page = ExaminationPage(driver)\n        payment_page = PaymentPage(driver)\n    \n        # Login\n        login_page.login()\n        wait.until(lambda d: d.current_url.startswith(\"https://clinic-local.amaz.com.vn/\"))\n    \n        # Patient actions\n        patient_page.go_to_patient_tab()\n        patient_page.select_patient(patient_index)\n        patient_page.click_appointment_button()\n        patient_page.fill_appointment_modal(symptom, [\"D:\\\\Clinic_Selenium_Pytest\\\\data\\\\images\\\\image_1.png\"])\n    \n        # Verify examination page\n        wait.until(EC.url_contains(\"/examination/detail/\"))\n        assert \"/examination/detail/\" in driver.current_url, f\"Test {test_id}: Failed to reach exam page\"\n    \n        # Examination actions\n        exam_page.enter_vital_signs(extra_data.get(\"vital_signs\", {}))\n        exam_page.enter_medical_history(extra_data.get(\"medical_history\", {}))\n>       exam_page.enter_physical_examination(extra_data.get(\"physical_exam\", {}))\n\ntests\\test_examination_process.py:71: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\nutils\\retry.py:15: in wrapper\n    return func(*args, **kwargs)\n           ^^^^^^^^^^^^^^^^^^^^^\npages\\examination_page.py:167: in enter_physical_examination\n    tab.click()\nvenv\\Lib\\site-packages\\selenium\\webdriver\\remote\\webelement.py:120: in click\n    self._execute(Command.CLICK_ELEMENT)\nvenv\\Lib\\site-packages\\selenium\\webdriver\\remote\\webelement.py:573: in _execute\n    return self._parent.execute(command, params)\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\nvenv\\Lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:458: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x000001D78DAE9450>\nresponse = {'status': 400, 'value': '{\"value\":{\"error\":\"element click intercepted\",\"message\":\"element click intercepted: Element ...ff6b3583268+11016]\\\\n\\\\tBaseThreadInitThunk [0x0x7ffa2797e8d7+23]\\\\n\\\\tRtlUserThreadStart [0x0x7ffa2805c34c+44]\\\\n\"}}'}\n\n    def check_response(self, response: dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                try:\n                    value = json.loads(value_json)\n                    if isinstance(value, dict):\n                        if len(value) == 1:\n                            value = value[\"value\"]\n                        status = value.get(\"error\", None)\n                        if not status:\n                            status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                            message = value.get(\"value\") or value.get(\"message\")\n                            if not isinstance(message, str):\n                                value = message\n                                message = message.get(\"message\")\n                        else:\n                            message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: type[WebDriverException]\n        e = ErrorCode()\n        error_codes = [item for item in dir(e) if not item.startswith(\"__\")]\n        for error_code in error_codes:\n            error_info = getattr(ErrorCode, error_code)\n            if isinstance(error_info, list) and status in error_info:\n                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)\n                break\n        else:\n            exception_class = WebDriverException\n    \n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.ElementClickInterceptedException: Message: element click intercepted: Element <div class=\"sc-eItTMj gTopxD\">...</div> is not clickable at point (975, 10). Other element would receive the click: <div class=\"sc-cHPgQl EomtA header-notification\">...</div>\nE         (Session info: chrome=139.0.7258.139); For documentation on this error, please visit: https://www.selenium.dev/documentation/webdriver/troubleshooting/errors#elementclickinterceptedexception\nE       Stacktrace:\nE       \tGetHandleVerifier [0x0x7ff6b3593d85+79397]\nE       \tGetHandleVerifier [0x0x7ff6b3593de0+79488]\nE       \t(No symbol) [0x0x7ff6b333c0fa]\nE       \t(No symbol) [0x0x7ff6b339afd9]\nE       \t(No symbol) [0x0x7ff6b3398972]\nE       \t(No symbol) [0x0x7ff6b33959c1]\nE       \t(No symbol) [0x0x7ff6b33948b1]\nE       \t(No symbol) [0x0x7ff6b33860e8]\nE       \t(No symbol) [0x0x7ff6b33bb19a]\nE       \t(No symbol) [0x0x7ff6b3385996]\nE       \t(No symbol) [0x0x7ff6b33bb3b0]\nE       \t(No symbol) [0x0x7ff6b33e3344]\nE       \t(No symbol) [0x0x7ff6b33baf73]\nE       \t(No symbol) [0x0x7ff6b33841b1]\nE       \t(No symbol) [0x0x7ff6b3384f43]\nE       \tGetHandleVerifier [0x0x7ff6b385e1ed+3005069]\nE       \tGetHandleVerifier [0x0x7ff6b385831d+2980797]\nE       \tGetHandleVerifier [0x0x7ff6b3877e0d+3110573]\nE       \tGetHandleVerifier [0x0x7ff6b35ad6de+184190]\nE       \tGetHandleVerifier [0x0x7ff6b35b516f+215567]\nE       \tGetHandleVerifier [0x0x7ff6b359c974+115220]\nE       \tGetHandleVerifier [0x0x7ff6b359cb29+115657]\nE       \tGetHandleVerifier [0x0x7ff6b3583268+11016]\nE       \tBaseThreadInitThunk [0x0x7ffa2797e8d7+23]\nE       \tRtlUserThreadStart [0x0x7ffa2805c34c+44]\n\nvenv\\Lib\\site-packages\\selenium\\webdriver\\remote\\errorhandler.py:232: ElementClickInterceptedException"}, "description": "Test the complete appointment, examination, and payment workflow.", "attachments": [{"name": "log", "source": "1b8bbbdb-ec04-4a73-913e-07a4428a64ac-attachment.txt", "type": "text/plain"}], "parameters": [{"name": "test_case", "value": "{'test_id': 3, 'patient_index': 3, 'symptom': 'Mệt mỏi, chóng mặt', 'diagnosis': 'Thiếu máu nhẹ', 'treatment': 'Bổ sung sắt, vitamin B12, ăn uống đủ chất', 'doctor_advice': 'Tái khám sau 7 ngày, theo dõi chóng mặt', 'water_morning': 1, 'water_afternoon': 0, 'water_evening': 1, 'water_night': 0, 'water_duration': 7, 'water_quantity': 14, 'water_note': 'Uống cùng bữa ăn', 'spray_morning': 1, 'spray_afternoon': 0, 'spray_evening': 1, 'spray_night': 0, 'spray_duration': 7, 'spray_quantity': 1, 'spray_note': 'Xịt hỗ trợ tuần hoàn', 'expected_exam_status': 'Khám xong', 'expected_payment_status': 'Đã thanh toán', 'vital_signs': {'temperature': '36.5', 'height': '160', 'weight': '50', 'systolic': '110', 'diastolic': '70', 'heartbeat': '80', 'spo2': '96', 'blood_sugar': '88'}, 'medical_history': {'admission_reason': 'Mệt mỏi và chóng mặt 5 ngày', 'allergy': 'Không dị ứng', 'personal_history': 'Không có bệnh mãn tính', 'family_history': 'Mẹ có tiền sử thiếu máu', 'medical_history': 'Chưa điều trị thiếu máu trước đây'}, 'physical_exam': {'neurology': 'Chóng mặt nhẹ khi đứng lên', 'dermatology': 'Da nhợt nhạt'}, 'regional_exam': {'other_organs': 'Bình thường'}, 'paraclinical': {'result': 'Xét nghiệm máu: hemoglobin 10.5 g/dL'}}"}], "start": 1756265196750, "stop": 1756265249649, "uuid": "0909e946-9685-4d3c-bd4f-a342f3ccf3a0", "historyId": "8e296de7e1d726c795be021db3f5ddd0", "testCaseId": "fd63d85305573f519d70d7f9e86fd1a8", "fullName": "tests.test_examination_process#test_appointment_workflow", "labels": [{"name": "parentSuite", "value": "tests"}, {"name": "suite", "value": "test_examination_process"}, {"name": "host", "value": "HuyNK"}, {"name": "thread", "value": "13892-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "tests.test_examination_process"}], "titlePath": ["tests", "test_examination_process.py"]}